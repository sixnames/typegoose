(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{118:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),p=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(n),f=r,d=l["".concat(i,".").concat(f)]||l[f]||b[f]||s;return n?o.a.createElement(d,a(a({ref:t},u),{},{components:n})):o.a.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var u=2;u<s;u++)i[u]=n[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),o=n(6),s=(n(0),n(118)),i={id:"assertions",title:"Assertions"},a={unversionedId:"api/functions/assertions",id:"api/functions/assertions",isDocsHomePage:!1,title:"Assertions",description:"assertion",source:"@site/../docs/api/functions/assertions.md",slug:"/api/functions/assertions",permalink:"/typegoose/docs/api/functions/assertions",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/functions/assertions.md",version:"current"},c=[{value:"assertion",id:"assertion",children:[]},{value:"assertionIsClass",id:"assertionisclass",children:[]}],u={rightToc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"assertion"},"assertion"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"assertion(cond, error?)")," is a custom assertion function that utilizes ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#assertion-functions"}),Object(s.b)("inlineCode",{parentName:"a"},"asserts")," from typescript 3.7"),Object(s.b)("br",{parentName:"p"}),"\n","-> this function is mainly build for internal use, but can also be used outside of typegoose"),Object(s.b)("p",null,"Example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'let someMultiValue: string | number | boolean = \'Hello\';\n// "someMultiValue"\'s type is currently "string | number | boolean", even with an string defined\nassertion(typeof someMultiValue === \'string\');\n// now the type of "someMultiValue" is just "string" and an error is thrown if it is not an string\n')),Object(s.b)("p",null,"Note: the function is named ",Object(s.b)("inlineCode",{parentName:"p"},"assertion")," and not ",Object(s.b)("inlineCode",{parentName:"p"},"assert"),", so do not confuse it and the types of testing frameworks and from NodeJS itself."),Object(s.b)("h2",{id:"assertionisclass"},"assertionIsClass"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"assertionIsClass(class)")," is like ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"#assertion"}),"assertion"),", but with a condition and error pre-defined.",Object(s.b)("br",{parentName:"p"}),"\n","-> this function is mainly build for internal use, but can also be used outside of typegoose"))}p.isMDXComponent=!0}}]);