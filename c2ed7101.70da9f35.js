(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{118:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a(0),i=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=i.a.createContext({}),c=function(e){var t=i.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=c(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),s=c(a),d=n,u=s["".concat(o,".").concat(d)]||s[d]||m[d]||l;return a?i.a.createElement(u,b(b({ref:t},p),{},{components:a})):i.a.createElement(u,b({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var b={};for(var r in t)hasOwnProperty.call(t,r)&&(b[r]=t[r]);b.originalType=e,b.mdxType="string"==typeof e?e:n,o[1]=b;for(var p=2;p<l;p++)o[p]=a[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},97:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return r})),a.d(t,"default",(function(){return c}));var n=a(2),i=a(6),l=(a(0),a(118)),o={id:"changelog",title:"Changelog"},b={unversionedId:"changelog",id:"changelog",isDocsHomePage:!1,title:"Changelog",description:"\x3c!--",source:"@site/../docs/changelog.md",slug:"/changelog",permalink:"/typegoose/docs/changelog",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/changelog.md",version:"current"},r=[{value:"7.3.4",id:"734",children:[]},{value:"7.3.3",id:"733",children:[]},{value:"7.3.2",id:"732",children:[]},{value:"7.3.1",id:"731",children:[]},{value:"7.3.0",id:"730",children:[]},{value:"7.2.0",id:"720",children:[]},{value:"7.1.3",id:"713",children:[]},{value:"7.1.2",id:"712",children:[]},{value:"7.1.1",id:"711",children:[]},{value:"7.1.0",id:"710",children:[]},{value:"7.0.0",id:"700",children:[]},{value:"6.5.0",id:"650",children:[]},{value:"6.4.0",id:"640",children:[]},{value:"6.3.2",id:"632",children:[]},{value:"6.3.1",id:"631",children:[]},{value:"6.3.0",id:"630",children:[]},{value:"6.2.2",id:"622",children:[]},{value:"6.2.1",id:"621",children:[]},{value:"6.2.0",id:"620",children:[]},{value:"6.1.8",id:"618",children:[]},{value:"6.1.7",id:"617",children:[]},{value:"6.1.6",id:"616",children:[]},{value:"6.1.5",id:"615",children:[]},{value:"6.1.4",id:"614",children:[]},{value:"6.1.3",id:"613",children:[]},{value:"6.1.2",id:"612",children:[]},{value:"6.1.1",id:"611",children:[]},{value:"6.1.0",id:"610",children:[]},{value:"6.0.4",id:"604",children:[]},{value:"6.0.3",id:"603",children:[]},{value:"6.0.2",id:"602",children:[]},{value:"6.0.1",id:"601",children:[]},{value:"6.0.0",id:"600",children:[]},{value:"5.9.2",id:"592",children:[]},{value:"5.9.1",id:"591",children:[]},{value:"5.9.0",id:"590",children:[]}],p={rightToc:r};function c(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"em"},"[IC]")," means ",Object(l.b)("inlineCode",{parentName:"em"},"Internal Change"))),Object(l.b)("h2",{id:"734"},"7.3.4"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Improved Client-side check")),Object(l.b)("h2",{id:"733"},"7.3.3"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Dont assume that the plugin function has an name [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/353"}),"typegoose#353"),"]"),Object(l.b)("li",{parentName:"ul"},"Only check mongoose & nodejs version if ",Object(l.b)("inlineCode",{parentName:"li"},"process")," is defined"),Object(l.b)("li",{parentName:"ul"},"[IC]"," replace all ",Object(l.b)("inlineCode",{parentName:"li"},"util.format")," with template strings [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/348"}),"typegoose#348"),"]"),Object(l.b)("li",{parentName:"ul"},"[IC]"," add wrapper & polyfill for ",Object(l.b)("inlineCode",{parentName:"li"},"util.deprecate"),"[",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/344"}),"typegoose#344"),"]")),Object(l.b)("h2",{id:"732"},"7.3.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update ",Object(l.b)("inlineCode",{parentName:"li"},"@prop")," tsdoc to show it supports Maps and Arrays"),Object(l.b)("li",{parentName:"ul"},"Update dead documentation links"),Object(l.b)("li",{parentName:"ul"},"Update enum-error to better reflect what the error is about")),Object(l.b)("h2",{id:"731"},"7.3.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"typescript")," to 3.9.7"))),Object(l.b)("li",{parentName:"ul"},"Add hook-typings for ",Object(l.b)("inlineCode",{parentName:"li"},"countDocuments"),", ",Object(l.b)("inlineCode",{parentName:"li"},"estimatedDocumentCount"),", ",Object(l.b)("inlineCode",{parentName:"li"},"deleteMany"),", ",Object(l.b)("inlineCode",{parentName:"li"},"findOneAndDelete"),", ",Object(l.b)("inlineCode",{parentName:"li"},"deleteOne"))),Object(l.b)("h2",{id:"730"},"7.3.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mongoose")," to 5.9.22"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lodash")," to 4.17.19"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to 5.7.30"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/lodash")," to 4.14.157"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/semver")," to 7.3.1"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"typescript")," to 3.9.6"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TimeStamps"),"'s (Default Class) properties are not marked as ",Object(l.b)("inlineCode",{parentName:"li"},"Readonly")," anymore"),Object(l.b)("li",{parentName:"ul"},"All Typeguards now accept ",Object(l.b)("inlineCode",{parentName:"li"},"undefined")," as the first parameter too (if an type was OR with ",Object(l.b)("inlineCode",{parentName:"li"},"undefined"),", the function would give an type-error)"),Object(l.b)("li",{parentName:"ul"},"Add option ",Object(l.b)("inlineCode",{parentName:"li"},"discriminators")," for embedded Discriminators [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/248"}),"typegoose#248"),"]"),Object(l.b)("li",{parentName:"ul"},"Set correct Decorator Return type (",Object(l.b)("inlineCode",{parentName:"li"},"ClassDecorator")," & ",Object(l.b)("inlineCode",{parentName:"li"},"PropertyDecorator"),")"),Object(l.b)("li",{parentName:"ul"},"Change warning message for ",Object(l.b)("inlineCode",{parentName:"li"},"warnMixed")),Object(l.b)("li",{parentName:"ul"},"If an SchemaType dosnt extend ",Object(l.b)("inlineCode",{parentName:"li"},"SchemaTypeOptions"),", the options are now defaulted to the outer-layer"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"innerOptions")," and ",Object(l.b)("inlineCode",{parentName:"li"},"outerOptions")," can now be used for Maps too"),Object(l.b)("li",{parentName:"ul"},"Custom Validators now support ",Object(l.b)("inlineCode",{parentName:"li"},"message")," being an function"),Object(l.b)("li",{parentName:"ul"},"Automatically convert ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Types.Buffer")," to ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.Buffer")),Object(l.b)("li",{parentName:"ul"},"Fix Types when extending default class ",Object(l.b)("inlineCode",{parentName:"li"},"Base")," with other than ",Object(l.b)("inlineCode",{parentName:"li"},"ObjectId")," [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/316"}),"typegoose#316"),"]"),Object(l.b)("li",{parentName:"ul"},"[IC]"," ",Object(l.b)("inlineCode",{parentName:"li"},"mapOptions")," now always errors if the given type dosnt extend ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.SchemaTypeOptions")),Object(l.b)("li",{parentName:"ul"},"[IC]"," Moved function ",Object(l.b)("inlineCode",{parentName:"li"},"_buildPropMetadata")," to its own file (",Object(l.b)("inlineCode",{parentName:"li"},"processProp"),") and renamed it to ",Object(l.b)("inlineCode",{parentName:"li"},"processProp")," [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/286"}),"typegoose#286"),"]"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Moved pre-processing in function ",Object(l.b)("inlineCode",{parentName:"li"},"prop")," into ",Object(l.b)("inlineCode",{parentName:"li"},"processProp")," [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/286"}),"typegoose#286"),"]"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Removed error ",Object(l.b)("inlineCode",{parentName:"li"},"NoMetadataError")),Object(l.b)("li",{parentName:"ul"},"[IC]"," Removed check that ",Object(l.b)("inlineCode",{parentName:"li"},"Type")," needs to be defined in ",Object(l.b)("inlineCode",{parentName:"li"},"prop")," / ",Object(l.b)("inlineCode",{parentName:"li"},"processProp"))),Object(l.b)("h2",{id:"720"},"7.2.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mongoose")," to 5.9.17"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to 5.7.21"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"typescript")," to 3.9.3"))),Object(l.b)("li",{parentName:"ul"},"Remove type ",Object(l.b)("inlineCode",{parentName:"li"},"RefSchemaType")),Object(l.b)("li",{parentName:"ul"},"Add ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.*")," that are suitable for ref to ",Object(l.b)("inlineCode",{parentName:"li"},"RefType")),Object(l.b)("li",{parentName:"ul"},"Runtime-Deprecate ",Object(l.b)("inlineCode",{parentName:"li"},"@mapProp"),"(",Object(l.b)("inlineCode",{parentName:"li"},"TDEP0002"),") & ",Object(l.b)("inlineCode",{parentName:"li"},"@arrayProp"),"(",Object(l.b)("inlineCode",{parentName:"li"},"TDEP0001"),")"),Object(l.b)("li",{parentName:"ul"},"Runtime-Deprecate ",Object(l.b)("inlineCode",{parentName:"li"},"type"),"-alias options, ",Object(l.b)("inlineCode",{parentName:"li"},"items")," & ",Object(l.b)("inlineCode",{parentName:"li"},"of")," & ",Object(l.b)("inlineCode",{parentName:"li"},"refType"),"(",Object(l.b)("inlineCode",{parentName:"li"},"TDEP0003"),")"),Object(l.b)("li",{parentName:"ul"},"Handle ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Types.Array<Ref<>>")," for Typeguards (",Object(l.b)("inlineCode",{parentName:"li"},"isDocumentArray")," & ",Object(l.b)("inlineCode",{parentName:"li"},"isRefTypeArray"),") [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/278"}),"typegoose#278"),"]")),Object(l.b)("h2",{id:"713"},"7.1.3"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Added an Error if option ",Object(l.b)("inlineCode",{parentName:"li"},"ref")," is set but is ",Object(l.b)("inlineCode",{parentName:"li"},"undefined/null")),Object(l.b)("li",{parentName:"ul"},"Add ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Types.DocumentArray")," and ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.DocumentArray")," to ",Object(l.b)("inlineCode",{parentName:"li"},"@prop")," array-detection"),Object(l.b)("li",{parentName:"ul"},"Change ",Object(l.b)("inlineCode",{parentName:"li"},"if (!kind)")," to ",Object(l.b)("inlineCode",{parentName:"li"},"if (isNullOrUndefined(kind))"))),Object(l.b)("h2",{id:"712"},"7.1.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@prop")," options types now work again"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"BasePropOptions.type")," is now ",Object(l.b)("inlineCode",{parentName:"li"},"unkown")," instead of ",Object(l.b)("inlineCode",{parentName:"li"},"any")),Object(l.b)("li",{parentName:"ul"},"All aliases of ",Object(l.b)("inlineCode",{parentName:"li"},"BasePropOptions.type")," now inherit the types from there"),Object(l.b)("li",{parentName:"ul"},"Fix bug where autopopulate (or any other plugin) wouldnt pick up on virtuals [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/274"}),"typegoose#274"),"]"),Object(l.b)("li",{parentName:"ul"},"[IC]"," ",Object(l.b)("inlineCode",{parentName:"li"},"refType")," is now moved to ",Object(l.b)("inlineCode",{parentName:"li"},"prop"))),Object(l.b)("h2",{id:"711"},"7.1.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Remove empty interface ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptions")),Object(l.b)("li",{parentName:"ul"},"Remove type ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptionsWithValidate")),Object(l.b)("li",{parentName:"ul"},"Rename type ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptionsWithNumberValidate")," to ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptionsForNumber")),Object(l.b)("li",{parentName:"ul"},"Rename type ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptionsWithStringValidate")," to ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptionsForString")),Object(l.b)("li",{parentName:"ul"},"Add options ",Object(l.b)("inlineCode",{parentName:"li"},"options")," & ",Object(l.b)("inlineCode",{parentName:"li"},"match")," for ",Object(l.b)("inlineCode",{parentName:"li"},"VirtualOptions")),Object(l.b)("li",{parentName:"ul"},"Add option ",Object(l.b)("inlineCode",{parentName:"li"},"enum")," for ",Object(l.b)("inlineCode",{parentName:"li"},"ValidateNumberOptions")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"arrayProp")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mapProp")," are now just an alias for ",Object(l.b)("inlineCode",{parentName:"li"},"prop")),Object(l.b)("li",{parentName:"ul"},"Set TSDoc option ",Object(l.b)("inlineCode",{parentName:"li"},"@deprecated")," for ",Object(l.b)("inlineCode",{parentName:"li"},"arrayProp")," and ",Object(l.b)("inlineCode",{parentName:"li"},"mapProp")),Object(l.b)("li",{parentName:"ul"},"Detect ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Types.Array")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.Array")," as ",Object(l.b)("inlineCode",{parentName:"li"},"Array")," in ",Object(l.b)("inlineCode",{parentName:"li"},"@prop")),Object(l.b)("li",{parentName:"ul"},"Detect ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Types.Map")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.Map")," as ",Object(l.b)("inlineCode",{parentName:"li"},"Map")," in ",Object(l.b)("inlineCode",{parentName:"li"},"@prop")),Object(l.b)("li",{parentName:"ul"},"Add Overloads to ",Object(l.b)("inlineCode",{parentName:"li"},"@prop")),Object(l.b)("li",{parentName:"ul"},"PascalCased decorators now have the TSDoc of the original function"),Object(l.b)("li",{parentName:"ul"},"Default class ",Object(l.b)("inlineCode",{parentName:"li"},"Base"),"'s ",Object(l.b)("inlineCode",{parentName:"li"},"__v")," & ",Object(l.b)("inlineCode",{parentName:"li"},"__t")," are now optional (with ",Object(l.b)("inlineCode",{parentName:"li"},"?"),")"),Object(l.b)("li",{parentName:"ul"},"Fix mentioned bug from ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/181"}),"typegoose#181"),", to allow ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.String")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.Number")," as valid enum types"),Object(l.b)("li",{parentName:"ul"},"Options ",Object(l.b)("inlineCode",{parentName:"li"},"of")," & ",Object(l.b)("inlineCode",{parentName:"li"},"items")," are now mapped to ",Object(l.b)("inlineCode",{parentName:"li"},"type")," and get called when ",Object(l.b)("inlineCode",{parentName:"li"},"buildSchema")," is called"),Object(l.b)("li",{parentName:"ul"},"[IC]"," DeDuplicate code in ",Object(l.b)("inlineCode",{parentName:"li"},"prop.ts"))),Object(l.b)("h2",{id:"710"},"7.1.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mongoose")," to 5.9.14"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to 5.7.19"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"tslib")," to 2.0.0"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"typescript")," to 3.9.2"))),Object(l.b)("li",{parentName:"ul"},"Fix duplicate hooks / virtuals / queryMethods / plugins / indices via inheritance [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/218"}),"typegoose#218"),"]"),Object(l.b)("li",{parentName:"ul"},"improve TSDoc of some functions"),Object(l.b)("li",{parentName:"ul"},"Fix ",Object(l.b)("inlineCode",{parentName:"li"},"queryMethod")," reflection"),Object(l.b)("li",{parentName:"ul"},"Set proper function type for ",Object(l.b)("inlineCode",{parentName:"li"},"queryMethod")),Object(l.b)("li",{parentName:"ul"},"Added the ability to define option ",Object(l.b)("inlineCode",{parentName:"li"},"ref")," with an arrow-function ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"/typegoose/docs/guides/advanced/reference-other-classes#referencing-other-classes"}),"(",Object(l.b)("inlineCode",{parentName:"a"},"ref: () => type"),")")),Object(l.b)("li",{parentName:"ul"},"All Decorators are now exported PascalCased & camelCased"),Object(l.b)("li",{parentName:"ul"},"Actually export the ",Object(l.b)("inlineCode",{parentName:"li"},"@queryMethod")," decorator"),Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"@queryMethod")," decorator now has correct types [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/247"}),"typegoose#247"),"]"),Object(l.b)("li",{parentName:"ul"},"The functions ",Object(l.b)("inlineCode",{parentName:"li"},"addModelToTypegoose"),", ",Object(l.b)("inlineCode",{parentName:"li"},"getModelForClass"),", ",Object(l.b)("inlineCode",{parentName:"li"},"buildSchema"),", ",Object(l.b)("inlineCode",{parentName:"li"},"deleteModelWithClass"),", ",Object(l.b)("inlineCode",{parentName:"li"},"getDiscriminatorModelForClass")," now have the ",Object(l.b)("inlineCode",{parentName:"li"},"T")," generic removed (it was unnecessary)"),Object(l.b)("li",{parentName:"ul"},"The functions ",Object(l.b)("inlineCode",{parentName:"li"},"addModelToTypegoose"),", ",Object(l.b)("inlineCode",{parentName:"li"},"getModelForClass"),", ",Object(l.b)("inlineCode",{parentName:"li"},"getDiscriminatorModelForClass")," now have an new optional generic ",Object(l.b)("inlineCode",{parentName:"li"},"QueryHelpers")),Object(l.b)("li",{parentName:"ul"},"The Type ",Object(l.b)("inlineCode",{parentName:"li"},"ReturnModelType")," now has the ",Object(l.b)("inlineCode",{parentName:"li"},"T")," generic removed (it was unnecessary)"),Object(l.b)("li",{parentName:"ul"},"The Type ",Object(l.b)("inlineCode",{parentName:"li"},"ReturnModelType")," now has an second optional generic ",Object(l.b)("inlineCode",{parentName:"li"},"QueryHelpers")),Object(l.b)("li",{parentName:"ul"},"Fix bug where ",Object(l.b)("inlineCode",{parentName:"li"},"ref: Class")," didnt execute ",Object(l.b)("inlineCode",{parentName:"li"},"getName")," when Virtual-Populate was used"),Object(l.b)("li",{parentName:"ul"},"Allow use of ",Object(l.b)("inlineCode",{parentName:"li"},"@prop")," for arrays & maps (In preparation for 8.0), it is now auto-detected based on ",Object(l.b)("inlineCode",{parentName:"li"},"design:type")),Object(l.b)("li",{parentName:"ul"},"The Decorator ",Object(l.b)("inlineCode",{parentName:"li"},"@plugin")," now automatically infers the options if the plugin & function have typings and use options"),Object(l.b)("li",{parentName:"ul"},"[IC]"," add some tslint rules & apply them"),Object(l.b)("li",{parentName:"ul"},"[IC]",' enable "strictNullChecks" & fix accordingly')),Object(l.b)("h2",{id:"700"},"7.0.0"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/typegoose/docs/guides/migrate-7"}),"To Migrate, please look at the migration guide")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mongoose")," to 5.9.10"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to 5.7.12"))),Object(l.b)("li",{parentName:"ul"},"Minimal NodeJS version is now 10.15"),Object(l.b)("li",{parentName:"ul"},"Minimal Typescript version is now 3.8.3"),Object(l.b)("li",{parentName:"ul"},"Typegoose class got completly removed"),Object(l.b)("li",{parentName:"ul"},"All Deprecated ",Object(l.b)("inlineCode",{parentName:"li"},"arrayProp")," options got remove",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"itemsRef")," replaced with plain ",Object(l.b)("inlineCode",{parentName:"li"},"ref")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"itemsRefPath")," replaced with plain ",Object(l.b)("inlineCode",{parentName:"li"},"refPath")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"itemsRefType")," replaced with plain ",Object(l.b)("inlineCode",{parentName:"li"},"refType")))),Object(l.b)("li",{parentName:"ul"},"All enums got moved from ",Object(l.b)("inlineCode",{parentName:"li"},"src/types")," to ",Object(l.b)("inlineCode",{parentName:"li"},"src/internal/constants")),Object(l.b)("li",{parentName:"ul"},"All things from ",Object(l.b)("inlineCode",{parentName:"li"},"src/types")," now get exported as ",Object(l.b)("inlineCode",{parentName:"li"},"type")),Object(l.b)("li",{parentName:"ul"},"All Errors now get exported as ",Object(l.b)("inlineCode",{parentName:"li"},"errors")),Object(l.b)("li",{parentName:"ul"},"All non-essentail types get exported as ",Object(l.b)("inlineCode",{parentName:"li"},"types")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"utils"),"'s ",Object(l.b)("inlineCode",{parentName:"li"},"getName")," function now gets exported"),Object(l.b)("li",{parentName:"ul"},"Add PropOption ",Object(l.b)("inlineCode",{parentName:"li"},"addNullToEnum")),Object(l.b)("li",{parentName:"ul"},"Remove Deprecated value ",Object(l.b)("inlineCode",{parentName:"li"},"overwrite")," for ",Object(l.b)("inlineCode",{parentName:"li"},"VirtualOptions")),Object(l.b)("li",{parentName:"ul"},"Remove instance properties from Model type (remove ",Object(l.b)("inlineCode",{parentName:"li"},"& T")," from ",Object(l.b)("inlineCode",{parentName:"li"},"ModelType"),")"),Object(l.b)("li",{parentName:"ul"},"Add class decorator ",Object(l.b)("inlineCode",{parentName:"li"},"queryMethod")),Object(l.b)("li",{parentName:"ul"},"[IC]"," rename file ",Object(l.b)("inlineCode",{parentName:"li"},"optionsProp")," to ",Object(l.b)("inlineCode",{parentName:"li"},"modelOptions")),Object(l.b)("li",{parentName:"ul"},"[IC]"," Replace mocha & chai with jest"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Completly remove ",Object(l.b)("inlineCode",{parentName:"li"},"TG_USE_NEW_ENUM")," from documentation & code"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Replace almost all if-throw with the internal ",Object(l.b)("inlineCode",{parentName:"li"},"assertion")," function"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Move VirtualPopulate cache to Reflection"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Move Plugins cache to Reflection"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Move Hooks cache to Reflection"),Object(l.b)("li",{parentName:"ul"},"[IC]"," All remaining test's models now get exported with an name (not being exported as ",Object(l.b)("inlineCode",{parentName:"li"},"model")," anymore)")),Object(l.b)("h2",{id:"650"},"6.5.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semver")," to 7.3.2"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"tslib")," to 1.11.1"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"loglevel")," to 1.6.8"))),Object(l.b)("li",{parentName:"ul"},"Remove ",Object(l.b)("inlineCode",{parentName:"li"},"useNewEnum")," type from ",Object(l.b)("inlineCode",{parentName:"li"},"types")),Object(l.b)("li",{parentName:"ul"},"Add warning when value is an primitive and will result in an ",Object(l.b)("inlineCode",{parentName:"li"},"Mixed")," (fixes ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/152"}),"typegoose#152"),")"),Object(l.b)("li",{parentName:"ul"},"Add option ",Object(l.b)("inlineCode",{parentName:"li"},"language_override")," to ",Object(l.b)("inlineCode",{parentName:"li"},"IndexOptions")),Object(l.b)("li",{parentName:"ul"},"Fix spelling errors in documentation"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Replace deprecated arrayProp options with proper ones in all tests & test-models")),Object(l.b)("h2",{id:"640"},"6.4.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mongoose")," to 5.9.2"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to 5.7.1"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semver")," to 7.1.3"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"loglevel")," to 1.6.7"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"tslib")," to 1.11.0"))),Object(l.b)("li",{parentName:"ul"},"Completly remove ",Object(l.b)("inlineCode",{parentName:"li"},"__uniqueID"),", because it was not used internally anymore")),Object(l.b)("h2",{id:"632"},"6.3.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Indexes: clone array instead of re-using it (fixes ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/194"}),"typegoose#194"),")")),Object(l.b)("h2",{id:"631"},"6.3.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Hopefully fix the Strictmode error of the new Ref-Type")),Object(l.b)("h2",{id:"630"},"6.3.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mongoose")," to 5.8.11"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to 5.7.0"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semver")," to 7.1.2"))),Object(l.b)("li",{parentName:"ul"},"Add ",Object(l.b)("inlineCode",{parentName:"li"},"@types/mongoose")," to ",Object(l.b)("inlineCode",{parentName:"li"},"peerDependencies")),Object(l.b)("li",{parentName:"ul"},"Add generic type to ",Object(l.b)("inlineCode",{parentName:"li"},"@plugin")," to set the type for the options"),Object(l.b)("li",{parentName:"ul"},"Use a modified ",Object(l.b)("inlineCode",{parentName:"li"},"Ref"),"-Type to automatically get the type (if the Ref'd type has ",Object(l.b)("inlineCode",{parentName:"li"},"string")," as ",Object(l.b)("inlineCode",{parentName:"li"},"_id"),", it automaticly sets the ",Object(l.b)("inlineCode",{parentName:"li"},"RefType")," to ",Object(l.b)("inlineCode",{parentName:"li"},"string"),")")),Object(l.b)("h2",{id:"622"},"6.2.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},'Fix use of "rawOptions.type" after deletion (fixes ',Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/178"}),"typegoose#178"),")")),Object(l.b)("h2",{id:"621"},"6.2.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Fix functions ",Object(l.b)("inlineCode",{parentName:"li"},"isString")," and ",Object(l.b)("inlineCode",{parentName:"li"},"isNumber")," to check against their ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose.Schema.Types.*.name")," equivalent (fixes ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/149"}),"typegoose#149"),")")),Object(l.b)("h2",{id:"620"},"6.2.0"),Object(l.b)("p",null,"This Update may break some code (mongoose upgrade, inline ",Object(l.b)("inlineCode",{parentName:"p"},"_id")," change, ",Object(l.b)("inlineCode",{parentName:"p"},"enum")," changes)"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Upgrade mongoose from 5.7.7 to 5.8.3"),Object(l.b)("li",{parentName:"ul"},"Upgrade @types/mongoose from 5.5.30 to 5.5.35"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Upgrade Typescript from 3.7.2 to 3.7.4"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Upgrade NYC from 14.1.1 to 15.0.0"))),Object(l.b)("li",{parentName:"ul"},"The option ",Object(l.b)("inlineCode",{parentName:"li"},"useNewEnum")," (and ",Object(l.b)("inlineCode",{parentName:"li"},"TG_USE_NEW_ENUM"),") got removed, because it would interfer with the number-enums"),Object(l.b)("li",{parentName:"ul"},"Added the ability to use number-enums on number-type props"),Object(l.b)("li",{parentName:"ul"},"Changed behaviour of string-enums to only work on string-type props"),Object(l.b)("li",{parentName:"ul"},"Fix ",Object(l.b)("inlineCode",{parentName:"li"},"PropOptions")," type for ",Object(l.b)("inlineCode",{parentName:"li"},"autopopulate")),Object(l.b)("li",{parentName:"ul"},"[IC]"," When the type is a ",Object(l.b)("inlineCode",{parentName:"li"},"Schema"),", it is now handled by ",Object(l.b)("inlineCode",{parentName:"li"},"mapOptions")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mapArrayOptions")),Object(l.b)("li",{parentName:"ul"},"[IC]"," fix tests not exiting after completion"),Object(l.b)("li",{parentName:"ul"},"[IC]"," add tslint-plugin ",Object(l.b)("inlineCode",{parentName:"li"},"tslint-consistent-codestyle"))),Object(l.b)("h2",{id:"618"},"6.1.8"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"backport for:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"fixes ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/160"}),"typegoose#160")),Object(l.b)("li",{parentName:"ul"},"[IC]"," ",Object(l.b)("inlineCode",{parentName:"li"},"mapArrayOptions")," now uses ",Object(l.b)("inlineCode",{parentName:"li"},"mapOptions")),Object(l.b)("li",{parentName:"ul"},"[IC]"," adding function ",Object(l.b)("inlineCode",{parentName:"li"},"mapOptions"))))),Object(l.b)("h2",{id:"617"},"6.1.7"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"add support for environment variables ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://typegoose.github.io/typegoose/docs/api/environment-variables/"}),"here the new documentation")),Object(l.b)("li",{parentName:"ul"},"[IC]"," ",Object(l.b)("inlineCode",{parentName:"li"},"warnMixed")," now uses the right ",Object(l.b)("inlineCode",{parentName:"li"},"target")),Object(l.b)("li",{parentName:"ul"},"[IC]"," add function ",Object(l.b)("inlineCode",{parentName:"li"},"utils.getRightTarget"))),Object(l.b)("h2",{id:"616"},"6.1.6"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"handle ",Object(l.b)("inlineCode",{parentName:"li"},"_id: false/true"),"  better"),Object(l.b)("li",{parentName:"ul"},"add function ",Object(l.b)("inlineCode",{parentName:"li"},"getClass")),Object(l.b)("li",{parentName:"ul"},"[IC]",' fix using "name"-getter in ',Object(l.b)("inlineCode",{parentName:"li"},"getName"))),Object(l.b)("h2",{id:"615"},"6.1.5"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Option merging is now properly done"),Object(l.b)("li",{parentName:"ul"},"[IC]"," fix giving wrong key to customMerger"),Object(l.b)("li",{parentName:"ul"},"[IC]",' remove the need to use "cloneDeepWith"')),Object(l.b)("h2",{id:"614"},"6.1.4"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Apply Global Options without needing @modelOptions"),Object(l.b)("li",{parentName:"ul"},"[IC]",' add function "utils.assignGlobalModelOptions"')),Object(l.b)("h2",{id:"613"},"6.1.3"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},'fix bug when "buildSchema" didnt get called when overwriting the type in ',Object(l.b)("inlineCode",{parentName:"li"},"@prop")),Object(l.b)("li",{parentName:"ul"},"[IC]"," add tests for Generic Discriminators")),Object(l.b)("h2",{id:"612"},"6.1.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Allow setting ",Object(l.b)("inlineCode",{parentName:"li"},"_id: false")," (and apply it) for ",Object(l.b)("inlineCode",{parentName:"li"},"@mapProp")),Object(l.b)("li",{parentName:"ul"},"[IC]"," De-duplicate code for ",Object(l.b)("inlineCode",{parentName:"li"},"_id")," if subDocument")),Object(l.b)("h2",{id:"611"},"6.1.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"deleteModel")," now deletes the model from the connection it is on ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/119"}),"typegoose#119")),Object(l.b)("li",{parentName:"ul"},"[IC]"," de-duplicate test code for connecting")),Object(l.b)("h2",{id:"610"},"6.1.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Upgrade mongoose from 5.7.1 to 5.7.7"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Upgrade Typescript from 3.6.x to 3.7.2"))),Object(l.b)("li",{parentName:"ul"},"Completly remove ",Object(l.b)("inlineCode",{parentName:"li"},"@staticMethod")," & ",Object(l.b)("inlineCode",{parentName:"li"},"@instanceMethod"),", because they were completly obsolete"),Object(l.b)("li",{parentName:"ul"},"README now has no documentation anymore"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@prop({ validate })")," now accepts ",Object(l.b)("inlineCode",{parentName:"li"},"{ validator, message }")," as an array"),Object(l.b)("li",{parentName:"ul"},"Add function ",Object(l.b)("inlineCode",{parentName:"li"},"deleteModel")," & ",Object(l.b)("inlineCode",{parentName:"li"},"deleteModelWithClass")),Object(l.b)("li",{parentName:"ul"},'allow Prop Option "type" to overwrite the inferred type ',Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://typegoose.github.io/typegoose/docs/api/decorators/prop/#type"}),"look here for an example")),Object(l.b)("li",{parentName:"ul"},'integrate "Array Validators & Transform" tests ',Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/29"}),"typegoose#29")),Object(l.b)("li",{parentName:"ul"},"adding global options, with ",Object(l.b)("inlineCode",{parentName:"li"},"setGlobalOptions")),Object(l.b)("li",{parentName:"ul"},"add modelOption ",Object(l.b)("inlineCode",{parentName:"li"},"runSyncIndexes")),Object(l.b)("li",{parentName:"ul"},"add modelOption ",Object(l.b)("inlineCode",{parentName:"li"},"allowMixed")),Object(l.b)("li",{parentName:"ul"},"add ",Object(l.b)("inlineCode",{parentName:"li"},"text")," to PropOptions"),Object(l.b)("li",{parentName:"ul"},"deprecate ArrayPropOptions's ",Object(l.b)("inlineCode",{parentName:"li"},"itemsRef"),", ",Object(l.b)("inlineCode",{parentName:"li"},"itemsRefPath")," & ",Object(l.b)("inlineCode",{parentName:"li"},"itemsRefType")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DocumentType")," will now overwrite the type of ",Object(l.b)("inlineCode",{parentName:"li"},"_id")," if the class is extending ",Object(l.b)("inlineCode",{parentName:"li"},"Base")," (in TypeScript there is currently no other way)"),Object(l.b)("li",{parentName:"ul"},"add ",Object(l.b)("inlineCode",{parentName:"li"},"tslib")," as dependency to minimize generated code"),Object(l.b)("li",{parentName:"ul"},"fixing typo in (deprecated) ",Object(l.b)("inlineCode",{parentName:"li"},"setModelForClass")),Object(l.b)("li",{parentName:"ul"},"Remake how Enums are handled, use ",Object(l.b)("inlineCode",{parentName:"li"},"setGlobalOptions({ globalOptions: { useNewEnum: true } })")," (to not break existing databases made with the old handling)"),Object(l.b)("li",{parentName:"ul"},"add function ",Object(l.b)("inlineCode",{parentName:"li"},"getModelWithString")),Object(l.b)("li",{parentName:"ul"},"[IC]",' tsconfig: add option "strictBindCallApply"'),Object(l.b)("li",{parentName:"ul"},"[IC]",' tsconfig: add option "strictFunctionTypes"'),Object(l.b)("li",{parentName:"ul"},"[IC]"," combine ",Object(l.b)("inlineCode",{parentName:"li"},"initAsObject")," and ",Object(l.b)("inlineCode",{parentName:"li"},"initAsArray")," into ",Object(l.b)("inlineCode",{parentName:"li"},"initProperty")),Object(l.b)("li",{parentName:"ul"},"[IC]",' Use internal "isNullOrUndefined", needed because all "util.is*" functions got deprecated in node 4.0.0'),Object(l.b)("li",{parentName:"ul"},"[IC]",' Replace all "isArray" with "Array.isArray", needed because all "util.is*" functions got deprecated in node 4.0.0'),Object(l.b)("li",{parentName:"ul"},"[IC]"," adding many sanity ",Object(l.b)("inlineCode",{parentName:"li"},"isNullOrUndefined")," checks"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Re-done how the handling of ",Object(l.b)("inlineCode",{parentName:"li"},"Mixed")," is done"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Re-done how ",Object(l.b)("inlineCode",{parentName:"li"},"IModelOptions")," are merged (thanks to lodash ",Object(l.b)("inlineCode",{parentName:"li"},"cloneDeepWith")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mergeWith"),")"),Object(l.b)("li",{parentName:"ul"},"[IC]",' de-duplicate "ref" & "refPath" code'),Object(l.b)("li",{parentName:"ul"},"[IC]",' added test for "Custom Types"'),Object(l.b)("li",{parentName:"ul"},"[IC]",' typegoose now makes use of "importHelpers"(tsconfig) to save some space'),Object(l.b)("li",{parentName:"ul"},"[IC]",' Refactor how "isPrimitive" works, some types like ',Object(l.b)("inlineCode",{parentName:"li"},"Buffer")," & ",Object(l.b)("inlineCode",{parentName:"li"},"Decimal")," now work"),Object(l.b)("li",{parentName:"ul"},"[IC]"," Added more debug logs to ",Object(l.b)("inlineCode",{parentName:"li"},"prop.ts")),Object(l.b)("li",{parentName:"ul"},"[IC]"," Move Decorator Cache to the class itself"),Object(l.b)("li",{parentName:"ul"},"[IC]",' "baseProp" now uses one single arguments, whith all the options'),Object(l.b)("li",{parentName:"ul"},"[IC]",' "createUniqueID" now returns a boolean instead of the "initname"')),Object(l.b)("h2",{id:"604"},"6.0.4"),Object(l.b)("p",null,"This Release didnt change anything on the code, it was mostly tests & github-page"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Update Dependencies",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Upgrade mongoose from 5.7.1 to 5.7.4"))),Object(l.b)("li",{parentName:"ul"},'Added soft warning when using "ref" in an "arrayProp"'),Object(l.b)("li",{parentName:"ul"},'Added soft warning when using "refPath" in an "arrayProp"'),Object(l.b)("li",{parentName:"ul"},'Add missing ")" to a deprecation message'),Object(l.b)("li",{parentName:"ul"},"[IC]"," Fixed some Test's types"),Object(l.b)("li",{parentName:"ul"},"[IC]"," internal variable renames to better reflect what they are for")),Object(l.b)("h2",{id:"603"},"6.0.3"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"when using ",Object(l.b)("inlineCode",{parentName:"li"},"@plugin"),", options are now checked if they are an object, when not: make them an object"),Object(l.b)("li",{parentName:"ul"},"Added many debug logs for ",Object(l.b)("inlineCode",{parentName:"li"},"_buildSchema")),Object(l.b)("li",{parentName:"ul"},"Added Prop Option ",Object(l.b)("inlineCode",{parentName:"li"},"autopopulate"),", only has an effect if ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose-autopopulate")," is used"),Object(l.b)("li",{parentName:"ul"},"Added default class ",Object(l.b)("inlineCode",{parentName:"li"},"FindOrCreate")," which has the types for ",Object(l.b)("inlineCode",{parentName:"li"},"mongoose-findorcreate"))),Object(l.b)("h2",{id:"602"},"6.0.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},'actually allow overwriting "_id" of "Base"'),Object(l.b)("li",{parentName:"ul"},"[IC]"," add npm version script")),Object(l.b)("h2",{id:"601"},"6.0.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Add TSDoc for ",Object(l.b)("inlineCode",{parentName:"li"},"refType")," on PropOptions"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"refPath")," now uses the right type (new uses ",Object(l.b)("inlineCode",{parentName:"li"},"refType")," instead of ",Object(l.b)("inlineCode",{parentName:"li"},"itemsType"),")"),Object(l.b)("li",{parentName:"ul"},"Fix decorator options (rawOptions) mutating thanks to ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/60"}),"typegoose#60")),Object(l.b)("li",{parentName:"ul"},"Pre hook's function's ",Object(l.b)("inlineCode",{parentName:"li"},"next"),' is now not marked as "optional" anymore, which caused ',Object(l.b)("inlineCode",{parentName:"li"},"next()")," to be ",Object(l.b)("inlineCode",{parentName:"li"},"EmptyVoidFn | undefined"))),Object(l.b)("h2",{id:"600"},"6.0.0"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/typegoose/docs/guides/migrate-6"}),"To Migrate, please look at the migration guide")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Project got moved to the new repo (typegoose/typegoose) and new package ",Object(l.b)("inlineCode",{parentName:"li"},"@typegoose/typegoose")),Object(l.b)("li",{parentName:"ul"},"rename ",Object(l.b)("inlineCode",{parentName:"li"},"InstanceType<T>")," to ",Object(l.b)("inlineCode",{parentName:"li"},"DocumentType<T>")," [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/366"}),"szokodiakos#366"),"]"),Object(l.b)("li",{parentName:"ul"},"adding a migration guide from ~5.9 to 6.0.0"),Object(l.b)("li",{parentName:"ul"},'adding missing "get" and "set" property options [',Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/260"}),"szokodiakos#260"),"]"),Object(l.b)("li",{parentName:"ul"},"adding ",Object(l.b)("inlineCode",{parentName:"li"},"@modelOptions")," and ",Object(l.b)("inlineCode",{parentName:"li"},"getModelForClass")," and ",Object(l.b)("inlineCode",{parentName:"li"},"setModelForClass")," will now override it"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"setModelForClass")," is now deprecated [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/6"}),"typegoose#6"),", ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/186"}),"szokodiakos#186"),"]"),Object(l.b)("li",{parentName:"ul"},"setting the Typegoose Class to abstract"),Object(l.b)("li",{parentName:"ul"},"deprecating the Typegoose Class because of making the functions outsourced [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/356"}),"szokodiakos#356"),"]"),Object(l.b)("li",{parentName:"ul"},"hook methods can now be arrays of methods [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/313"}),"szokodiakos#313"),"]"),Object(l.b)("li",{parentName:"ul"},"completely removed parallel from pre hook"),Object(l.b)("li",{parentName:"ul"},"refactored the types of hooks"),Object(l.b)("li",{parentName:"ul"},"adding support for any value in prop for plugins [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/374"}),"szokodiakos#374"),"]"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"schema.loadClass")," is now used instead of ",Object(l.b)("inlineCode",{parentName:"li"},"@instanceMethod")," and ",Object(l.b)("inlineCode",{parentName:"li"},"@staticMethod")," [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/48"}),"szokodiakos#48"),", ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/346"}),"szokodiakos#346"),", ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/182"}),"szokodiakos#182"),"]"),Object(l.b)("li",{parentName:"ul"},"method decorators are now deprecated"),Object(l.b)("li",{parentName:"ul"},"schema generation got refactored (/reconstructed) multiple times"),Object(l.b)("li",{parentName:"ul"},"adding ",Object(l.b)("inlineCode",{parentName:"li"},"count")," to VirtualOptions"),Object(l.b)("li",{parentName:"ul"},"Updated Dependencies (^",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"mailto:mongoose@5.7.1"}),"mongoose@5.7.1"),")"),Object(l.b)("li",{parentName:"ul"},"adding discriminator support [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/11"}),"typegoose#11"),"]"),Object(l.b)("li",{parentName:"ul"},"adding default class for (schemaOptions) timestamps"),Object(l.b)("li",{parentName:"ul"},"adding more docs to README & as tsdoc"),Object(l.b)("li",{parentName:"ul"},"some changes that are probably forgot"),Object(l.b)("li",{parentName:"ul"},"szokodiakos#363 got reverted in favor of ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"mailto:mongoose@5.6.9"}),"mongoose@5.6.9")),Object(l.b)("li",{parentName:"ul"},"fixes Custom Options not passed through to mongoose & plugins when using ref [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/379"}),"szokodiakos#379"),"]"),Object(l.b)("li",{parentName:"ul"},'Adding "immutable" prop option [',Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/320"}),"szokodiakos#320"),"]"),Object(l.b)("li",{parentName:"ul"},"adding Types to Ref (to allow not just ObjectID) [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/szokodiakos/typegoose/issues/369"}),"szokodiakos#369"),"]"),Object(l.b)("li",{parentName:"ul"},"szokodiakos#54 seems to work now in 6.0.0 (added test in 6.0.0-21)"),Object(l.b)("li",{parentName:"ul"},"because of the changes in 6.0.0 #235 got fixed"),Object(l.b)("li",{parentName:"ul"},'Adding "InvalidTypeError" for the case that "undefined" or "null" is used as a type (or something other happenes)'),Object(l.b)("li",{parentName:"ul"},'Change Error text of "InvalidPropError"'),Object(l.b)("li",{parentName:"ul"},'adding some "soft-errors" and traces with "loglevel"'),Object(l.b)("li",{parentName:"ul"},'exposing settings for "loglevel"'),Object(l.b)("li",{parentName:"ul"},"fixes Decorator Execution Order [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/23"}),"typegoose#23"),", ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/24"}),"typegoose#24"),"]"),Object(l.b)("li",{parentName:"ul"},"add support for custom discriminator properties"),Object(l.b)("li",{parentName:"ul"},"add error if using a self-containing class"),Object(l.b)("li",{parentName:"ul"},"add support for using multiple classes with the same name (",Object(l.b)("inlineCode",{parentName:"li"},"automaticName"),", ",Object(l.b)("inlineCode",{parentName:"li"},"customName"),", ",Object(l.b)("inlineCode",{parentName:"li"},"collection"),")"),Object(l.b)("li",{parentName:"ul"},"[IC]",' "NoParamConstructor" got renamed into "AnyParamConstructor" it now accepts any arguments'),Object(l.b)("li",{parentName:"ul"},"[IC]"," Remake data.ts to use Maps [",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/typegoose/typegoose/issues/3"}),"typegoose#3"),"]"),Object(l.b)("li",{parentName:"ul"},"[IC]"," adding many tests and bumping coverage"),Object(l.b)("li",{parentName:"ul"},"[IC]"," moving many Types to types.ts"),Object(l.b)("li",{parentName:"ul"},"[IC]"," removing unneeded dependencies"),Object(l.b)("li",{parentName:"ul"},"[IC]"," changed how travis runs jobs multiple times"),Object(l.b)("li",{parentName:"ul"},"[IC]"," many tslint rule changes"),Object(l.b)("li",{parentName:"ul"},"[IC]",' getting the name from "class.name" got outsourced into "utils.getName" (for future use)'),Object(l.b)("li",{parentName:"ul"},"[IC]"," use switches instead of many if's"),Object(l.b)("li",{parentName:"ul"},"[IC]"," adding some tests")),Object(l.b)("h2",{id:"592"},"5.9.2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Change README examples & badges to the new repo")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"use new travis.yml (from version 6.0.0)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"use new style of package.json (from version 6.0.0)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Tags got deleted and added, please remove all local tags and re-download them"))),Object(l.b)("p",null,"This Release did not change anything in the code, it is just there to update the NPM front"),Object(l.b)("h2",{id:"591"},"5.9.1"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"fix accidentally added typeguards"),Object(l.b)("li",{parentName:"ul"},"add a note that typegoose uses mongoose's strict by default"),Object(l.b)("li",{parentName:"ul"},"add note that typegoose doesn't work with classes with the same name (at least in 5.x, working on it in 6.x)"),Object(l.b)("li",{parentName:"ul"},"implemented a hack for ObjectId / ObjectID (mongoose some version fixed this)")),Object(l.b)("h2",{id:"590"},"5.9.0"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This should not be a breaking release"),Object(l.b)("li",{parentName:"ul"},"Hooks now support Regular Expression for names, like mongoose"),Object(l.b)("li",{parentName:"ul"},"Tests are splitted into their own files"),Object(l.b)("li",{parentName:"ul"},"Fixing ",Object(l.b)("inlineCode",{parentName:"li"},"itemsRefPath")," & adding tests"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"itemsRef")," now supports to be used with a string as model"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@prop({ alias })")," is now supported"),Object(l.b)("li",{parentName:"ul"},"Index weights are now supported"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isDocument")," & ",Object(l.b)("inlineCode",{parentName:"li"},"isDocumentArray")," typeguards are now implemented"),Object(l.b)("li",{parentName:"ul"},"Updated Dependencies\nNote worthy are:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"mongoose 5.6 is now required instead of 5.5"),Object(l.b)("li",{parentName:"ul"},"this project should be used with TypeScript 3.5+"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@mapProp()")," is now implemented"),Object(l.b)("li",{parentName:"ul"},"Fix for ",Object(l.b)("inlineCode",{parentName:"li"},"@prop({ select })")),Object(l.b)("li",{parentName:"ul"},"A public version of ",Object(l.b)("inlineCode",{parentName:"li"},"buildSchema")," is now available"),Object(l.b)("li",{parentName:"ul"},"Added more Documentation to README"),Object(l.b)("li",{parentName:"ul"},"Added TSDOC to many functions and properties"),Object(l.b)("li",{parentName:"ul"},"build target is now ES6 instead of ES5")))}c.isMDXComponent=!0}}]);